package net.sf.l2j.commons.gui;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

import net.sf.l2j.gameserver.custom.data.BalanceData;

public class vulnerabilityefence extends AbstractTableModel
{
	private static final long serialVersionUID = 1L;
	
	private final String[] _columnNames =
	{
		"Skill Type",
		"Multiplier"
	};
	
	private final List<Row> _rows = new ArrayList<>();
	private List<Row> _filteredRows;
	
	private static class Row
	{
		String skillType;
		Double multiplier;
		
		Row(String skillType, Double multiplier)
		{
			this.skillType = skillType;
			this.multiplier = multiplier;
		}
	}
	
	public vulnerabilityefence()
	{
		loadData();
		_filteredRows = new ArrayList<>(_rows);
	}
	
	private void loadData()
	{
		_rows.clear();
		for (Map.Entry<String, Double> entry : BalanceData.getInstance()._vulnModifiers.entrySet())
		{
			_rows.add(new Row(entry.getKey(), entry.getValue()));
		}
	}
	
	public void filter(String text)
	{
		String lower = text.toLowerCase();
		_filteredRows = _rows.stream().filter(row -> row.skillType.toLowerCase().contains(lower)).collect(Collectors.toList());
		fireTableDataChanged();
	}
	
	@Override
	public int getRowCount()
	{
		return _filteredRows.size();
	}
	
	@Override
	public int getColumnCount()
	{
		return _columnNames.length;
	}
	
	@Override
	public Object getValueAt(int rowIndex, int columnIndex)
	{
		Row row = _filteredRows.get(rowIndex);
		return columnIndex == 0 ? row.skillType : row.multiplier;
	}
	
	@Override
	public String getColumnName(int column)
	{
		return _columnNames[column];
	}
	
	@Override
	public boolean isCellEditable(int rowIndex, int columnIndex)
	{
		return columnIndex == 1;
	}
	
	@Override
	public void setValueAt(Object aValue, int rowIndex, int columnIndex)
	{
		if (columnIndex == 1)
		{
			try
			{
				double newValue = Double.parseDouble(aValue.toString());
				Row row = _filteredRows.get(rowIndex);
				row.multiplier = newValue;
				
				BalanceData.getInstance().saveVulnerability(row.skillType, newValue);
				fireTableCellUpdated(rowIndex, columnIndex);
			}
			catch (NumberFormatException e)
			{
				JOptionPane.showMessageDialog(null, "Valor inválido. Digite um número válido para o multiplicador.", "Erro", JOptionPane.ERROR_MESSAGE);
			}
			
		}
	}
}
